name: 02-Compatibility Test

on:
  workflow_run:
    workflows: ["01-Build artifactss"]
    types: [ completed ]

permissions:
  contents: read
  actions: read

jobs:
  compat-matrix:
    # run only if 01 succeeded and base event was push(main) or release
    if: ${{ github.event.workflow_run.conclusion == 'success' && ((github.event.workflow_run.event == 'push' && github.event.workflow_run.head_branch == 'main') || github.event.workflow_run.event == 'release') }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        vendor: [ temurin, microsoft ]
        java:   [ 11, 17, 21, 23 ]
        exclude:
          - vendor: microsoft
            java: 23
    steps:
      - name: Checkout at triggering commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Download EXACT dist from stage 01
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p artifacts
          gh run download ${{ github.event.workflow_run.id }} \
            -R ${{ github.event.workflow_run.repository.full_name }} \
            --name gpf-dist --dir artifacts
          ls -l artifacts

      - name: Pick main/sources/javadoc
        id: pick
        run: |
          MAIN=$(ls artifacts/*.jar | grep -v -- '-sources.jar' | grep -v -- '-javadoc.jar' | head -n1)
          SRC=$(ls artifacts/*-sources.jar | head -n1 || true)
          DOC=$(ls artifacts/*-javadoc.jar | head -n1 || true)
          echo "main=$MAIN" >> $GITHUB_OUTPUT
          echo "src=$SRC"   >> $GITHUB_OUTPUT
          echo "doc=$DOC"   >> $GITHUB_OUTPUT
          echo "Main: $MAIN"; echo "Src: $SRC"; echo "Doc: $DOC"

      - name: Set up Java ${{ matrix.java }} (${{ matrix.vendor }})
        uses: actions/setup-java@v4
        with:
          distribution: ${{ matrix.vendor }}
          java-version: ${{ matrix.java }}
          cache: maven

      - run: java -version

      - name: Copy runtime deps (no rebuild)
        run: mvn -q -DincludeScope=runtime -DoutputDirectory=deps dependency:copy-dependencies

      - name: Compile tiny consumer (against lib JAR + deps)
        run: |
          cat > Runner.java <<'JAVA'
          import java.nio.file.*; import java.util.*; import java.util.stream.*;
          import io.github.lemon_ant.globpathfinder.GlobPathFinder;
          import io.github.lemon_ant.globpathfinder.PathQuery;
          public class Runner {
            public static void main(String[] args) {
              PathQuery q = PathQuery.builder()
                .baseDir(Paths.get(".")) .includeGlobs(Set.of("**/*"))
                .excludeGlobs(Set.of()) .allowedExtensions(Set.of())
                .onlyFiles(false) .maxDepth(Integer.MAX_VALUE).build();
              try (Stream<Path> s = GlobPathFinder.findPaths(q)) {
                System.out.println("OK " + s.limit(1).count());
              }
            }
          }
          JAVA
          javac -cp "${{ steps.pick.outputs.main }}:deps/*:." Runner.java

      - name: Run consumer on this JVM
        run: java -cp "${{ steps.pick.outputs.main }}:deps/*:." Runner

  # single handoff to 03 (no matrix fan-out)
  handoff:
    needs: compat-matrix
    if: ${{ success() }}
    runs-on: ubuntu-latest
    permissions:
      actions: read
    steps:
      - name: Download EXACT dist from 01
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p artifacts
          gh run download ${{ github.event.workflow_run.id }} \
            -R ${{ github.event.workflow_run.repository.full_name }} \
            --name gpf-dist --dir artifacts
          ls -l artifacts

      - name: Upload VERIFIED dist for 03
        uses: actions/upload-artifacts@v4
        with:
          name: gpf-dist-verified
          path: artifacts/*.jar
