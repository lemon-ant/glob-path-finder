name: Build once → Run many (compat) + Snapshot publish

on:
  push:
    branches: [ main ]   # после merge в default-ветку
  workflow_dispatch:      # ручной запуск, удобно для отладки

permissions:
  contents: read
  packages: write

jobs:
  build-baseline:
    name: Build baseline JAR (no heavy gates)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 17 (baseline compiler, bytecode 11 via --release)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Build once
        run: |
          # Full build here if нужно: mvn -Pquality-gates verify
          # Для скорости — лёгкая сборка без тяжёлых гейтов:
          mvn -B -q -Dci=true -Dskip-quality-gates=true clean verify
          ls -l target

      - name: Upload library JAR
        uses: actions/upload-artifact@v4
        with:
          name: glob-path-finder-jar
          path: target/*.jar
          if-no-files-found: error

  compat-matrix:
    name: Runtime compat — JDK ${{ matrix.java }} / ${{ matrix.vendor }}
    needs: build-baseline
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { vendor: temurin,   java: 11 }
          - { vendor: temurin,   java: 17 }
          - { vendor: temurin,   java: 21 }
          - { vendor: temurin,   java: 21.0.2 }   # пример пиннинга патч-версии
          - { vendor: temurin,   java: 23 }       # 23 есть у Temurin
          - { vendor: microsoft, java: 11 }
          - { vendor: microsoft, java: 17 }
          - { vendor: microsoft, java: 21 }       # у MS 23 нет
    steps:
      - uses: actions/checkout@v4

      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: glob-path-finder-jar
          path: artifact

      - name: Pick JAR path
        id: pick
        run: |
          JAR=$(ls artifact/*.jar | head -n1)
          echo "jar=$JAR" >> $GITHUB_OUTPUT
          echo "Picked $JAR"

      - name: Set up Java ${{ matrix.java }} (${{ matrix.vendor }})
        uses: actions/setup-java@v4
        with:
          distribution: ${{ matrix.vendor }}
          java-version: ${{ matrix.java }}

      - name: Show java -version
        run: java -version

      - name: Compile smoke consumer (against the built JAR)
        run: |
          cat > Runner.java <<'JAVA'
          // Minimal runtime smoke to link & call the lib on this JVM
          import java.nio.file.*;
          import java.util.*;
          import java.util.stream.*;
          import io.github.lemon_ant.globpathfinder.GlobPathFinder;
          import io.github.lemon_ant.globpathfinder.PathQuery;

          public class Runner {
            public static void main(String[] args) {
              // Build a minimal query; adjust if API changes.
              PathQuery query = PathQuery.builder()
                  .baseDir(Paths.get("."))
                  .includeGlobs(Set.of("**/*"))
                  .excludeGlobs(Set.of())
                  .allowedExtensions(Set.of())
                  .onlyFiles(false)
                  .maxDepth(Integer.MAX_VALUE)
                  .build();

              try (Stream<Path> s = GlobPathFinder.findPaths(query)) {
                long cnt = s.limit(1).count();
                System.out.println("OK, visible entries: " + cnt);
              }
            }
          }
          JAVA
          javac -cp "${{ steps.pick.outputs.jar }}:." Runner.java

      - name: Run smoke on this JVM
        run: |
          java -cp "${{ steps.pick.outputs.jar }}:." Runner

  publish-snapshot:
    name: Publish SNAPSHOT to GitHub Packages (only if compat passed)
    needs: compat-matrix
    runs-on: ubuntu-latest
    if: ${{ success() }}   # блокировка публикации при падении матрицы
    steps:
      - uses: actions/checkout@v4

      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: glob-path-finder-jar
          path: artifact

      - name: Pick JAR path
        id: pick
        run: |
          JAR=$(ls artifact/*.jar | head -n1)
          echo "jar=$JAR" >> $GITHUB_OUTPUT
          echo "Picked $JAR"

      - name: Set up Java for deploy creds
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          server-id: github                     # matches <id> in distributionManagement
          server-username: GITHUB_ACTOR
          server-password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy the very same JAR (snapshot)
        run: |
          # Deploy exactly the artifact we built earlier:
          mvn -B -q \
            deploy:deploy-file \
            -Dfile="${{ steps.pick.outputs.jar }}" \
            -DrepositoryId=github \
            -Durl="https://maven.pkg.github.com/lemon-ant/glob-path-finder" \
            -DgroupId=io.github.lemon-ant \
            -DartifactId=glob-path-finder \
            -Dversion=1.0-SNAPSHOT \
            -Dpackaging=jar \
            -DpomFile=pom.xml
